import json
import os
from typing import List, Dict, Optional
import chromadb
from sentence_transformers import SentenceTransformer
from src.config.settings import logger


class KnowledgeSearcher:
    """
    –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ sentence-transformers –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    """
    
    def __init__(self, services_file: str = "doc/services_knowledge_base.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
        
        Args:
            services_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—Å–ª—É–≥–∞–º–∏
        """
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è)
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å sentence-transformers –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB (—Ñ–∞–π–ª–æ–≤–∞—è –ë–î)
        os.makedirs("data/chroma", exist_ok=True)
        self.client = chromadb.PersistentClient(path="data/chroma")
        self.collection = self.client.get_or_create_collection(
            name="services",
            metadata={"description": "–£—Å–ª—É–≥–∏ –ê–∫–∞–¥–µ–º–∏–∏ –¥—Ä–æ–Ω–æ–≤"}
        )
        logger.info("‚úÖ ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –≤ –ë–î
        self.services_file = services_file
        self._load_services_if_needed()
        
        logger.info(f"üéØ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞. –£—Å–ª—É–≥ –≤ –ë–î: {self.collection.count()}")

    def _load_services_if_needed(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Å–ª—É–≥–∏ –≤ –ë–î –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è"""
        if self.collection.count() == 0:
            logger.info("üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è, –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏")
            self.load_services_from_file()
        else:
            logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {self.collection.count()} —É—Å–ª—É–≥")

    def load_services_from_file(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Å–ª—É–≥–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        """
        try:
            with open(self.services_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            services = data.get('services', [])
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º {len(services)} —É—Å–ª—É–≥ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ChromaDB
            documents = []
            metadatas = []
            ids = []
            
            for service in services:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                search_text = self._create_search_text(service)
                documents.append(search_text)
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                metadata = {
                    "id": service["id"],
                    "name": service["name"],
                    "category": service["category"],
                    "courseCode": service.get("courseCode", ""),
                    "price": self._extract_price(service),
                }
                metadatas.append(metadata)
                ids.append(service["id"])
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ChromaDB (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
            self.collection.add(
                documents=documents,
                metadatas=metadatas,
                ids=ids
            )
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {e}")
            raise

    def _create_search_text(self, service: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏
        
        Args:
            service: –î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            
        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        text_parts = [
            service["name"],
            service["category"],
            service.get("sub_category", ""),
            service.get("full_description", "")
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏
        details = service.get("details", {})
        if isinstance(details, dict):
            for key, value in details.items():
                if isinstance(value, str):
                    text_parts.append(f"{key}: {value}")
                elif isinstance(value, list):
                    text_parts.extend(value)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        return " ".join(filter(None, text_parts))

    def _extract_price(self, service: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏"""
        details = service.get("details", {})
        if isinstance(details, dict):
            return details.get("–¶–µ–Ω–∞", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    def search(self, query: str, limit: int = 3) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' (–ª–∏–º–∏—Ç: {limit})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            results = self.collection.query(
                query_texts=[query],
                n_results=limit,
                include=["metadatas", "documents", "distances"]
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            found_services = []
            if results['metadatas'] and results['metadatas'][0]:
                for i, metadata in enumerate(results['metadatas'][0]):
                    distance = results['distances'][0][i]
                    similarity = 1 - distance  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ö–æ–∂–µ—Å—Ç—å
                    
                    service_result = {
                        "id": metadata["id"],
                        "name": metadata["name"],
                        "category": metadata["category"],
                        "courseCode": metadata["courseCode"],
                        "price": metadata["price"],
                        "similarity": round(similarity, 3),
                        "relevance_score": round(similarity * 100, 1)
                    }
                    found_services.append(service_result)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_services)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É—Å–ª—É–≥")
            for service in found_services:
                logger.info(f"  üìå {service['name']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {service['relevance_score']}%)")
                
            return found_services
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    def get_service_details(self, service_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏ –ø–æ ID
        
        Args:
            service_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ª—É–≥–∏
            
        Returns:
            –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –∏–ª–∏ None
        """
        try:
            with open(self.services_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            services = data.get('services', [])
            for service in services:
                if service["id"] == service_id:
                    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏: {service['name']}")
                    return service
                    
            logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ —Å ID '{service_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É—Å–ª—É–≥–∏: {e}")
            return None

    def search_and_format_for_telegram(self, query: str, limit: int = 3) -> str:
        """
        –ü–æ–∏—Å–∫ —É—Å–ª—É–≥ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        results = self.search(query, limit)
        
        if not results:
            return (
                "ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª—É–≥ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, "
                "—á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞–º', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è')."
            )
        
        response = f"üéØ –ù–∞—à–µ–ª –¥–ª—è –≤–∞—Å {len(results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª—É–≥:\n\n"
        
        for i, service in enumerate(results, 1):
            response += f"**{i}. {service['name']}**\n"
            response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['category']}\n"
            response += f"üí∞ –¶–µ–Ω–∞: {service['price']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            details = self.get_service_details(service['id'])
            if details and details.get('details'):
                service_details = details['details']
                if isinstance(service_details, dict):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
                    key_info = []
                    for key, value in service_details.items():
                        if key not in ['–¶–µ–Ω–∞'] and isinstance(value, str):
                            key_info.append(f"{key}: {value}")
                    
                    if key_info:
                        response += f"‚ÑπÔ∏è {', '.join(key_info[:2])}\n"  # –ú–∞–∫—Å–∏–º—É–º 2 –¥–µ—Ç–∞–ª–∏
            
            response += f"üè∑Ô∏è –ö–æ–¥: {service['courseCode']}\n\n"
        
        response += "üí¨ –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —É—Å–ª—É–≥ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã?"
        
        return response

    def format_service_details(self, service_id: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è Telegram
        
        Args:
            service_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ª—É–≥–∏
            
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
        """
        service = self.get_service_details(service_id)
        
        if not service:
            return "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑."
        
        response = f"üìã **{service['name']}**\n\n"
        response += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['category']}\n"
        
        if service.get('sub_category'):
            response += f"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {service['sub_category']}\n"
        
        # –î–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏
        details = service.get('details', {})
        if isinstance(details, dict):
            response += "\nüí° **–î–µ—Ç–∞–ª–∏:**\n"
            for key, value in details.items():
                if isinstance(value, str):
                    response += f"‚Ä¢ {key}: {value}\n"
                elif isinstance(value, list):
                    response += f"‚Ä¢ {key}:\n"
                    for item in value:
                        response += f"  - {item}\n"
        
        # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if service.get('full_description'):
            response += f"\nüìñ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{service['full_description']}\n"
        
        response += f"\nüè∑Ô∏è –ö–æ–¥ —É—Å–ª—É–≥–∏: {service.get('courseCode', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        
        return response


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
knowledge_searcher = KnowledgeSearcher()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers
def search_services(query: str, limit: int = 3) -> str:
    """–ü–æ–∏—Å–∫ —É—Å–ª—É–≥ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram"""
    return knowledge_searcher.search_and_format_for_telegram(query, limit)

def get_service_info(service_id: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ"""
    return knowledge_searcher.format_service_details(service_id) 