"""
LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å qwen/qwen3-14b:free –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
—á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º.
"""

import httpx
import json
from pathlib import Path
from typing import List, Dict, Optional
from src.config.settings import settings, logger
from .logger import llm_logger


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenRouter"""
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        self.model = "qwen/qwen3-14b:free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å 14.8B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.headers = {
            "Authorization": f"Bearer {settings.openrouter_api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://help-bot-ai.local",
            "X-Title": "Help Bot AI - Drone Academy Consultant"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        self.system_prompt = self._load_system_prompt()
        
        logger.info(f"ü§ñ LLM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: {self.model}")
        logger.info(f"üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(self.system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ data/system_prompt.txt"""
        try:
            prompt_path = Path(__file__).parent.parent.parent / "data" / "system_prompt.txt"
            with open(prompt_path, "r", encoding="utf-8") as f:
                prompt = f.read().strip()
            
            if not prompt:
                raise ValueError("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—É—Å—Ç–æ–π")
                
            return prompt
            
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª system_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return self._get_fallback_prompt()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return (
            "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ '–ê–∫–∞–¥–µ–º–∏—è –¥—Ä–æ–Ω–æ–≤'. "
            "–ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –∏ —É—Å–ª—É–≥–∏. "
            "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. "
            "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –ø–æ –¥—Ä–æ–Ω–∞–º."
        )

    async def generate_response(
        self, 
        user_message: str,
        found_services: str = "",
        conversation_history: Optional[List[Dict]] = None,
        user_id: str = "unknown"
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            found_services: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è RAG)
            conversation_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (—Å–ø–∏—Å–æ–∫ dict —Å role/content)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç LLM –º–æ–¥–µ–ª–∏
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —É—Å–ª—É–≥
        full_system_prompt = self.system_prompt
        if found_services:
            full_system_prompt += f"\n\n–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò:\n{found_services}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        messages = [{"role": "system", "content": full_system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
        if conversation_history:
            messages.extend(conversation_history[-5:])
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        messages.append({"role": "user", "content": user_message})
        
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        request_context = llm_logger.start_request(
            user_id=user_id,
            model=self.model,
            messages=messages,
            found_services=found_services,
            conversation_history=conversation_history
        )
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    self.api_url,
                    headers=self.headers,
                    json={
                        "model": self.model,
                        "messages": messages,
                        "temperature": 0.7,  # –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏/—Ç–æ—á–Ω–æ—Å—Ç–∏
                        "max_tokens": 800,   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                        "top_p": 0.9        # Nucleus sampling –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                    }
                )
                
                response.raise_for_status()
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
                assistant_message = data["choices"][0]["message"]["content"]
                
                # –õ–æ–≥–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                llm_logger.log_success(request_context, data, assistant_message)
                
                return assistant_message.strip()
                
        except httpx.HTTPStatusError as e:
            error_detail = ""
            try:
                error_data = e.response.json()
                error_detail = error_data.get("error", {}).get("message", "")
            except:
                error_detail = e.response.text
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º HTTP –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            llm_logger.log_error(
                request_context, 
                "http_error", 
                f"HTTP {e.response.status_code}: {error_detail}"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
            return (
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º. "
                "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            )
            
        except httpx.TimeoutException:
            # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            llm_logger.log_error(request_context, "timeout", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API")
            
            return (
                "‚è∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            )
            
        except Exception as e:
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            llm_logger.log_error(
                request_context, 
                "unexpected_error", 
                f"{type(e).__name__}: {str(e)}"
            )
            
            return (
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
            )
    
    def _prepare_fallback_response(self, error_type: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        fallbacks = {
            "rate_limit": (
                "üö¶ –°–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            ),
            "model_error": (
                "ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            ),
            "network": (
                "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            )
        }
        
        return fallbacks.get(error_type, fallbacks["model_error"])


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers
llm_client = LLMClient() 