from aiogram import Router, types
from aiogram.filters import Command
from src.config.settings import logger
from src.knowledge.search import KnowledgeSearcher
from src.llm.client import llm_client
from src.llm.logger import llm_logger
from .states import dialog_manager

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∑–Ω–∞–Ω–∏–π –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
knowledge_searcher = KnowledgeSearcher()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–∏—Å–∫–∞"""
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –≤ –∏—Å—Ç–æ—Ä–∏—é
    dialog_manager.add_message(user_id, "user", "/start")
    
    welcome_text = (
        "üéØ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ê–∫–∞–¥–µ–º–∏–∏ –¥—Ä–æ–Ω–æ–≤.\n\n"
        "üí´ –Ø —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—Ç—å –∫—É—Ä—Å—ã –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –æ–ø—ã—Ç\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–ø–∏—Å—å—é –∏ –æ–ø–ª–∞—Ç–æ–π\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º\n\n"
        "üöÅ –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n"
        "‚Ä¢ '–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä–æ–Ω–æ–º'\n"
        "‚Ä¢ '–ò—â—É –∫—É—Ä—Å—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞'\n"
        "‚Ä¢ '–ù—É–∂–Ω–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'\n\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üöÅ‚ú®"
    )
    
    await message.answer(welcome_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_manager.add_message(user_id, "assistant", welcome_text)
    
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


@router.message(Command("stats"))
async def stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LLM"""
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        stats = llm_logger.get_statistics(hours=24)
        
        if "error" in stats:
            await message.answer(f"üìä {stats['error']}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>\n\n"
            f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: <b>{stats['successful_requests']}</b>\n"
            f"‚ùå –û—à–∏–±–æ–∫: <b>{stats['failed_requests']}</b>\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{stats['success_rate_percent']}%</b>\n\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['unique_users']}</b>\n"
            f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>{stats['avg_response_time_ms']}–º—Å</b>\n"
            f"üéØ –¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: <b>{stats['avg_tokens_per_request']}</b>\n"
            f"üî• –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: <b>{stats['total_tokens_used']}</b>\n\n"
            f"üéØ –° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —É—Å–ª—É–≥: <b>{stats['requests_with_context']}</b>\n"
            f"üìö –° –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞: <b>{stats['requests_with_history']}</b>"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats['error_breakdown']:
            stats_text += "\n\n‚ùå <b>–¢–∏–ø—ã –æ—à–∏–±–æ–∫:</b>\n"
            for error_type, count in stats['error_breakdown'].items():
                stats_text += f"‚Ä¢ {error_type}: {count}\n"
        
        await message.answer(stats_text, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.add_message(user_id, "user", "/stats")
        dialog_manager.add_message(user_id, "assistant", stats_text)
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("üòî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message()
async def smart_consultation_handler(message: types.Message):
    """RAG-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –ø–æ–∏—Å–∫ + LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞"""
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name
    query = message.text or ""
    
    logger.info(f"üí¨ RAG-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name}): '{query}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not query.strip():
        await message.answer("ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_manager.add_message(user_id, "user", query)
    
    try:
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        search_results = knowledge_searcher.search(query, limit=3)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(search_results)}")
        
        # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if search_results:
            services_context_parts = []
            for service in search_results:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
                details = knowledge_searcher.get_service_details(service['id'])
                
                service_info = f"–£—Å–ª—É–≥–∞: {service['name']}\n"
                service_info += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['category']}\n"
                service_info += f"–¶–µ–Ω–∞: {service['price']}\n"
                service_info += f"–ö–æ–¥ –∫—É—Ä—Å–∞: {service['courseCode']}\n"
                
                if details and details.get('full_description'):
                    service_info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {details['full_description']}\n"
                
                if details and details.get('details'):
                    service_info += f"–î–µ—Ç–∞–ª–∏: {details['details']}\n"
                
                service_info += f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {service['relevance_score']}%"
                services_context_parts.append(service_info)
            
            services_context = "\n\n".join(services_context_parts)
        else:
            services_context = "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        logger.info(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM: {len(services_context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        conversation_history = dialog_manager.get_conversation_history(user_id, limit=5)
        
        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
        response = await llm_client.generate_response(
            user_message=query,
            found_services=services_context,
            conversation_history=conversation_history,
            user_id=user_id
        )
        
        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.add_message(user_id, "assistant", response)
        
        logger.info(f"‚úÖ RAG-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ LLM
        try:
            logger.info(f"üîÑ Fallback: –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            fallback_response = knowledge_searcher.search_and_format_for_telegram(query)
            await message.answer(fallback_response, parse_mode="HTML")
            
        except Exception as fallback_error:
            logger.error(f"‚ùå Fallback —Ç–æ–∂–µ failed –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {fallback_error}")
            
            error_response = (
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            )
            await message.answer(error_response)


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º –∑–Ω–∞–Ω–∏–π")
    dp.include_router(router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å KnowledgeSearcher –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 